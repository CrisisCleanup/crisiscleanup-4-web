name: E2E Tests

# Run every day at 9:00 AM
# See: https://crontab.guru/examples.html
on:
  schedule:
    - cron: '0 14 * * *'
  workflow_dispatch:
  workflow_call:

jobs:
  versions:
    name: Get Versions 📜
    uses: CrisisCleanup/crisiscleanup-4-web/.github/workflows/get-versions.yml@master

  e2e:
    name: 🧪 E2E Tests 💻 | ${{ matrix.stage }} | ${{ matrix.project }}
    timeout-minutes: 60
    runs-on: ${{ matrix.os }}
    needs: [versions]
    strategy:
      fail-fast: false
      matrix:
        stage: [development, staging, production]
        project: [chromium, firefox, webkit]
        include:
          - project: chromium
            os: ubuntu-latest
            cache_dir: ~/.cache/ms-playwright
          - project: firefox
            os: ubuntu-latest
            cache_dir: ~/.cache/ms-playwright
          - project: webkit
            os: macos-12
            cache_dir: ~/Library/Caches/ms-playwright
    steps:
      - uses: actions/checkout@v3

      - uses: pnpm/action-setup@v2
        with:
          version: ${{ needs.versions.outputs.PNPM_VERSION }}

      - uses: actions/setup-node@v3
        with:
          node-version: ${{ needs.versions.outputs.NODE_VERSION }}
          cache: pnpm

      # NOTE: Using single quotes when setting $GITHUB_ENV in-case secret has special characters
      - name: 🔧 Setup Common Env
        run: |
          echo 'PW_SKIP_WEBSERVER=1' >> $GITHUB_ENV

      - name: 🔧 Setup Development Test Env
        if: matrix.stage == 'development'
        run: |
          echo 'PW_TEST_TITLE_PREFIX=DEV: ' >> $GITHUB_ENV
          echo 'VITE_APP_BASE_URL=https://app.dev.crisiscleanup.io' >> $GITHUB_ENV
          echo 'TEST_APP_EMAIL=${{ secrets.TEST_APP_EMAIL_DEV }}' >> $GITHUB_ENV
          echo 'TEST_APP_PASSWORD=${{ secrets.TEST_APP_PASSWORD_DEV }}' >> $GITHUB_ENV
          echo 'TEST_APP_ADMIN_EMAIL=${{ secrets.TEST_APP_ADMIN_EMAIL_DEV }}' >> $GITHUB_ENV
          echo 'TEST_APP_ADMIN_PASSWORD=${{ secrets.TEST_APP_ADMIN_PASSWORD_DEV }}' >> $GITHUB_ENV

      - name: 🔧 Setup Staging Test Env
        if: matrix.stage == 'staging'
        run: |
          echo 'PW_TEST_TITLE_PREFIX=STAGING: ' >> $GITHUB_ENV
          echo 'VITE_APP_BASE_URL=https://app.staging.crisiscleanup.io' >> $GITHUB_ENV
          echo 'TEST_APP_EMAIL=${{ secrets.TEST_APP_EMAIL_PROD }}' >> $GITHUB_ENV
          echo 'TEST_APP_PASSWORD=${{ secrets.TEST_APP_PASSWORD_PROD }}' >> $GITHUB_ENV
          echo 'TEST_APP_ADMIN_EMAIL=${{ secrets.TEST_APP_ADMIN_EMAIL_PROD }}' >> $GITHUB_ENV
          echo 'TEST_APP_ADMIN_PASSWORD=${{ secrets.TEST_APP_ADMIN_PASSWORD_PROD }}' >> $GITHUB_ENV

      - name: 🔧 Setup Production Test Env
        if: matrix.stage == 'production'
        run: |
          # add 'PROD: ' prefix in test titles. ex: 'PROD: should do this - ( @production )'
          echo 'PW_TEST_TITLE_PREFIX=PROD: ' >> $GITHUB_ENV
          echo 'VITE_APP_BASE_URL=https://crisiscleanup.org' >> $GITHUB_ENV
          echo 'TEST_APP_EMAIL=${{ secrets.TEST_APP_EMAIL_PROD }}' >> $GITHUB_ENV
          echo 'TEST_APP_PASSWORD=${{ secrets.TEST_APP_PASSWORD_PROD }}' >> $GITHUB_ENV
          echo 'TEST_APP_ADMIN_EMAIL=${{ secrets.TEST_APP_ADMIN_EMAIL_PROD }}' >> $GITHUB_ENV
          echo 'TEST_APP_ADMIN_PASSWORD=${{ secrets.TEST_APP_ADMIN_PASSWORD_PROD }}' >> $GITHUB_ENV

      - name: Install dependencies
        run: pnpm install

      - name: 🔧 Set Playwright Version
        run: pnpm exec playwright --version > .github/.playwright-version

      - name: ⚡️ Cache playwright binaries
        uses: actions/cache@v3
        id: playwright-cache
        with:
          path: ${{ matrix.cache_dir }}
          key: ${{ runner.os }}-${{ matrix.project }}-pw-${{ hashFiles('**/.playwright-version') }}

      - name: 📥 Install ${{ matrix.project }} with Playwright
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: pnpm exec playwright install --with-deps ${{ matrix.project }}

      - name: 🎭 Playwright tests
        run: pnpm run test:e2e:${{ matrix.stage }} --project=${{ matrix.project }} --shard=1/20

      - name: 📤 Upload blob report to GitHub Actions Artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: all-blob-reports-${{ matrix.stage }}
          path: blob-report
          retention-days: 1

      - id: results
        shell: bash
        if: always()
        run: |
          mkdir -p e2e-job-outputs
          echo 'TEST_STATUS=${{ job.status }}' >> e2e-job-outputs/${{ matrix.stage }}_${{ matrix.project }}.txt

      - uses: actions/upload-artifact@v3
        with:
          name: e2e-job-outputs
          path: e2e-job-outputs/*.txt

  notify-slack:
    name: 🔔 Notify Slack 🔔
    needs: [e2e]
    runs-on: ubuntu-latest
    if: always()
    env:
      E2E_SUMMARY_FILE: e2e-summary.txt
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: e2e-job-outputs
          path: e2e-job-outputs

      - id: e2e-outputs
        shell: bash
        if: always()
        run: |
          # Read values from all files under e2e-job-outputs/*.txt
          all_success=true  # Variable to track if all files have 'success'
          for file in e2e-job-outputs/*.txt; do
            if [[ -f $file ]]; then
              prefix=$(basename "$file" .txt)
              prefix="${prefix^^}"  # Uppercase the prefix
              echo "${prefix}: " >> ${{ env.E2E_SUMMARY_FILE }}
              while IFS='=' read -r key value; do
                if [[ ! -z $key && ! -z $value ]]; then
                  echo "\t${key} => ${value}" >> ${{ env.E2E_SUMMARY_FILE }}
                fi
              done < "$file"
              echo ""
              # Check if the file has 'success' status
              if ! grep -q "TEST_STATUS=success" "$file"; then
                all_success=false
              fi
            fi
          done
          echo "CCU_E2E_SUMMARY=$(cat $message_file)" >> $GITHUB_ENV
          echo "CCU_E2E_ALL_SUCCESS=$all_success" >> $GITHUB_ENV

          echo "Output..."
          echo ${{ env.CCU_E2E_SUMMARY }}
          echo ${{ env.CCU_E2E_ALL_SUCCESS }}

      - name: 🟢 Notify Slack 🟢
        uses: rtCamp/action-slack-notify@v2
        if: env.CCU_E2E_ALL_SUCCESS == 'true'
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_ICON: ${{ secrets.SLACK_ICON }}
          SLACK_USERNAME: 'CrisisCleanup Bot'
          SLACK_CHANNEL: 'core'
          SLACK_COLOR: '#13E768'
          SLACK_TITLE: 'E2e Tests Passed!'
          SLACK_MESSAGE: |
            🧪 E2e Tests Passed!! 🎉

            SUMMARY:

            ${{ env.CCU_E2E_SUMMARY }}

      - name: 🔴 Notify Slack 🔴
        uses: rtCamp/action-slack-notify@v2
        if: env.CCU_E2E_ALL_SUCCESS == 'false'
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_ICON: ${{ secrets.SLACK_ICON }}
          SLACK_USERNAME: 'CrisisCleanup Bot'
          SLACK_CHANNEL: 'core'
          SLACK_COLOR: '#D94F37'
          SLACK_TITLE: 'E2e Tests Failed!'
          SLACK_MESSAGE: |
            🧪 E2e Tests Failed... Someone broke something! 😦

            SUMMARY:

            ${{ env.CCU_E2E_SUMMARY }}
